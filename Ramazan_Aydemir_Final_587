{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "## 1.0 Prerequisite Code"
      ],
      "metadata": {
        "id": "1NApcFUYjX8g"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#importing libraries#\n",
        "\n",
        "import pandas as pd\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer, TfidfVectorizer\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.metrics import classification_report, recall_score, precision_score, f1_score, roc_curve, auc, precision_recall_curve\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.cluster import KMeans, AgglomerativeClustering\n",
        "from scipy.cluster.hierarchy import ward, dendrogram\n",
        "from sklearn.metrics.pairwise import cosine_similarity"
      ],
      "metadata": {
        "id": "6_VVawXTjbJO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# get .CSV File\n",
        "\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sfcyo9AZRO5v",
        "outputId": "3c6ae3a5-c89e-4e7b-e236-e3f7f2ff3222"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "weightloss = pd.read_csv('weightloss.csv')\n",
        "weightloss.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "4CZGD359SzEM",
        "outputId": "d30d3c47-c561-4c0c-f845-947c05ec688c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   rev_ID                  drugName    condition  \\\n",
              "0   39293                  Contrave  Weight Loss   \n",
              "1    4907                    Belviq  Weight Loss   \n",
              "2  128575               Phentermine      Obesity   \n",
              "3  138742               Phentermine  Weight Loss   \n",
              "4  165109  Phentermine / topiramate      Obesity   \n",
              "\n",
              "                                              review  rating   date  \\\n",
              "0  \"Contrave combines drugs that were used for al...       9  42799   \n",
              "1  \"This is a waste of money.  Did not curb my ap...       1  41905   \n",
              "2  \"Started out yesterday at 242 and this morning...      10  42162   \n",
              "3  \"I absolutely LOVE this medicine. I lost 30 po...       9  40681   \n",
              "4  \"I am 60 yo male starting weight 297lbs. Since...      10  41788   \n",
              "\n",
              "   usefulCount  \n",
              "0           35  \n",
              "1           57  \n",
              "2            5  \n",
              "3           19  \n",
              "4           48  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7a38218f-5d83-4007-8a4e-3cd7e09e21a2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>rev_ID</th>\n",
              "      <th>drugName</th>\n",
              "      <th>condition</th>\n",
              "      <th>review</th>\n",
              "      <th>rating</th>\n",
              "      <th>date</th>\n",
              "      <th>usefulCount</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>39293</td>\n",
              "      <td>Contrave</td>\n",
              "      <td>Weight Loss</td>\n",
              "      <td>\"Contrave combines drugs that were used for al...</td>\n",
              "      <td>9</td>\n",
              "      <td>42799</td>\n",
              "      <td>35</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4907</td>\n",
              "      <td>Belviq</td>\n",
              "      <td>Weight Loss</td>\n",
              "      <td>\"This is a waste of money.  Did not curb my ap...</td>\n",
              "      <td>1</td>\n",
              "      <td>41905</td>\n",
              "      <td>57</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>128575</td>\n",
              "      <td>Phentermine</td>\n",
              "      <td>Obesity</td>\n",
              "      <td>\"Started out yesterday at 242 and this morning...</td>\n",
              "      <td>10</td>\n",
              "      <td>42162</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>138742</td>\n",
              "      <td>Phentermine</td>\n",
              "      <td>Weight Loss</td>\n",
              "      <td>\"I absolutely LOVE this medicine. I lost 30 po...</td>\n",
              "      <td>9</td>\n",
              "      <td>40681</td>\n",
              "      <td>19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>165109</td>\n",
              "      <td>Phentermine / topiramate</td>\n",
              "      <td>Obesity</td>\n",
              "      <td>\"I am 60 yo male starting weight 297lbs. Since...</td>\n",
              "      <td>10</td>\n",
              "      <td>41788</td>\n",
              "      <td>48</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7a38218f-5d83-4007-8a4e-3cd7e09e21a2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7a38218f-5d83-4007-8a4e-3cd7e09e21a2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7a38218f-5d83-4007-8a4e-3cd7e09e21a2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-cc550e08-e006-43e4-be2d-c572cd6c9fb9\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cc550e08-e006-43e4-be2d-c572cd6c9fb9')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-cc550e08-e006-43e4-be2d-c572cd6c9fb9 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "weightloss",
              "summary": "{\n  \"name\": \"weightloss\",\n  \"rows\": 2437,\n  \"fields\": [\n    {\n      \"column\": \"rev_ID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 52661,\n        \"min\": 4227,\n        \"max\": 225928,\n        \"num_unique_values\": 2437,\n        \"samples\": [\n          128101,\n          55127,\n          164979\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"drugName\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 39,\n        \"samples\": [\n          \"Methamphetamine\",\n          \"Megace ES\",\n          \"Adipex-P\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"condition\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Obesity\",\n          \"Weight Loss\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"review\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2193,\n        \"samples\": [\n          \"\\\"Week 5 - I have reached the maximum 3.0 on the injection pen. This is what I have to say about week 5: &quot;so this is what it feels like not to be hungry, always totally obsessed with food and when and what I will be eating next!&quot; Woo Ho! I have had the best week! Been able to eat healthy meals, not pig out, stop when I&#039;m full and feel normal. I have lost about 10 kgs in 5 weeks. I am not exercising - just always busy and active. \\r\\r\\nFor fatigue and energy I take a multi, vitamin C, iron and Berroca when I need it for a boost. I will be getting a prescription to continue with this injection for another month and keep monitoring progress.\\\"\",\n          \"\\\"Tried it for a few days - just the one in AM. Nausea. Gas from the sulfur pits of hell.  The runs. Stomach pain. Jittery. sleepless. Of course I am not eating much. But. no. Just. No.\\\"\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 10,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          6,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"date\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 815,\n        \"min\": 39505,\n        \"max\": 43080,\n        \"num_unique_values\": 1310,\n        \"samples\": [\n          41000,\n          39927\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"usefulCount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 41,\n        \"min\": 0,\n        \"max\": 484,\n        \"num_unique_values\": 182,\n        \"samples\": [\n          30,\n          80\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 1.1 Problem Definition & Statement (20)"
      ],
      "metadata": {
        "id": "XqMbCMcwgVT9"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**1.1 A (5) First, use the code cell below to identify your group's selected dataset and the target variable (column name) that will be used for predictive modeling.**"
      ],
      "metadata": {
        "id": "coVLPlUCXLDL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# @title Identify Problem/Dataset\n",
        "\n",
        "Dataset = 'weightloss.csv' # @param [\"weightloss.csv\", \"spam.csv\", \"airlines.csv\", \"weightloss.csv\", \"amazon_reviews.csv\"]\n",
        "Target_Variable = 'rating' # @param {type:\"string\"}\n",
        "\n",
        "print(Dataset)\n",
        "print(Target_Variable)\n"
      ],
      "metadata": {
        "id": "DjKTYEvutDD1",
        "cellView": "form",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a4fcd334-4a16-48ea-c558-efe4fc2c9431"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "weightloss.csv\n",
            "rating\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**1.1 B (15) Next, use the text cell below for your problem definition and statement.**\n",
        "\n",
        "**The problem statement should discuss the following: what is the problem and who it affects, financial/social implications of having a solution to the problem, how the model would be used in practice, and the acceptable level of model performance.**\n"
      ],
      "metadata": {
        "id": "IT_T_-2wcW8s"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Celebrities and famous people have been using weightless drugs as an alternative to natural weight loss methods such as balanced diets and excursive for years.  Now more and more regular people are trying them following the gain in popularity from the influencers and celebrity use.  But are they really working or is it all a scam.  \n",
        "Our groups goal is to look at the customers to see if they are really working for their intended purposes.  We aim to look at both the positive and negative reviews of the mediations.  \n"
      ],
      "metadata": {
        "id": "9Ojd7EpEUWUB"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "<hr>\n",
        "<br>\n",
        "\n",
        "## 1.2 Data: Cleansing and Preprocessing (15)\n"
      ],
      "metadata": {
        "id": "Pl61W-KmZJ-z"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**1.2 A (10) Use the code cell below (and add any additional cells, as necessary, below the provided cell) to cleanse and preprocess the data that you will use in your analysis.**"
      ],
      "metadata": {
        "id": "3-6uNlV4aAvG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "weightloss.info()"
      ],
      "metadata": {
        "id": "-4WPIHi1ZIvz",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2abde61b-0f26-4092-cb14-9f5077c90249"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 2437 entries, 0 to 2436\n",
            "Data columns (total 7 columns):\n",
            " #   Column       Non-Null Count  Dtype \n",
            "---  ------       --------------  ----- \n",
            " 0   rev_ID       2437 non-null   int64 \n",
            " 1   drugName     2437 non-null   object\n",
            " 2   condition    2437 non-null   object\n",
            " 3   review       2437 non-null   object\n",
            " 4   rating       2437 non-null   int64 \n",
            " 5   date         2437 non-null   int64 \n",
            " 6   usefulCount  2437 non-null   int64 \n",
            "dtypes: int64(4), object(3)\n",
            "memory usage: 133.4+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "weightloss['rating_cleaned'] = weightloss['rating'].apply(lambda x: 1 if x >=7  else 0)"
      ],
      "metadata": {
        "id": "0yRY_jFBWYiA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "weightloss['condition_cleaned'] = weightloss['condition'].apply(lambda x: 1 if x==\"Weight Loss\" else 0)"
      ],
      "metadata": {
        "id": "MEoFe-2Gb4re"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "weightloss.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 292
        },
        "id": "t9qT9W2BW_t7",
        "outputId": "bb29a9c5-389c-4800-c4f8-16d85371f845"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   rev_ID                  drugName    condition  \\\n",
              "0   39293                  Contrave  Weight Loss   \n",
              "1    4907                    Belviq  Weight Loss   \n",
              "2  128575               Phentermine      Obesity   \n",
              "3  138742               Phentermine  Weight Loss   \n",
              "4  165109  Phentermine / topiramate      Obesity   \n",
              "\n",
              "                                              review  rating   date  \\\n",
              "0  \"Contrave combines drugs that were used for al...       9  42799   \n",
              "1  \"This is a waste of money.  Did not curb my ap...       1  41905   \n",
              "2  \"Started out yesterday at 242 and this morning...      10  42162   \n",
              "3  \"I absolutely LOVE this medicine. I lost 30 po...       9  40681   \n",
              "4  \"I am 60 yo male starting weight 297lbs. Since...      10  41788   \n",
              "\n",
              "   usefulCount  rating_cleaned  condition_cleaned  \n",
              "0           35               1                  1  \n",
              "1           57               0                  1  \n",
              "2            5               1                  0  \n",
              "3           19               1                  1  \n",
              "4           48               1                  0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-17f06031-738f-49f4-b2a8-d092be876be5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>rev_ID</th>\n",
              "      <th>drugName</th>\n",
              "      <th>condition</th>\n",
              "      <th>review</th>\n",
              "      <th>rating</th>\n",
              "      <th>date</th>\n",
              "      <th>usefulCount</th>\n",
              "      <th>rating_cleaned</th>\n",
              "      <th>condition_cleaned</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>39293</td>\n",
              "      <td>Contrave</td>\n",
              "      <td>Weight Loss</td>\n",
              "      <td>\"Contrave combines drugs that were used for al...</td>\n",
              "      <td>9</td>\n",
              "      <td>42799</td>\n",
              "      <td>35</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4907</td>\n",
              "      <td>Belviq</td>\n",
              "      <td>Weight Loss</td>\n",
              "      <td>\"This is a waste of money.  Did not curb my ap...</td>\n",
              "      <td>1</td>\n",
              "      <td>41905</td>\n",
              "      <td>57</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>128575</td>\n",
              "      <td>Phentermine</td>\n",
              "      <td>Obesity</td>\n",
              "      <td>\"Started out yesterday at 242 and this morning...</td>\n",
              "      <td>10</td>\n",
              "      <td>42162</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>138742</td>\n",
              "      <td>Phentermine</td>\n",
              "      <td>Weight Loss</td>\n",
              "      <td>\"I absolutely LOVE this medicine. I lost 30 po...</td>\n",
              "      <td>9</td>\n",
              "      <td>40681</td>\n",
              "      <td>19</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>165109</td>\n",
              "      <td>Phentermine / topiramate</td>\n",
              "      <td>Obesity</td>\n",
              "      <td>\"I am 60 yo male starting weight 297lbs. Since...</td>\n",
              "      <td>10</td>\n",
              "      <td>41788</td>\n",
              "      <td>48</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-17f06031-738f-49f4-b2a8-d092be876be5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-17f06031-738f-49f4-b2a8-d092be876be5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-17f06031-738f-49f4-b2a8-d092be876be5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2f1d9d35-9949-4a62-b09a-ef5eabe35cd8\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2f1d9d35-9949-4a62-b09a-ef5eabe35cd8')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2f1d9d35-9949-4a62-b09a-ef5eabe35cd8 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "weightloss",
              "summary": "{\n  \"name\": \"weightloss\",\n  \"rows\": 2437,\n  \"fields\": [\n    {\n      \"column\": \"rev_ID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 52661,\n        \"min\": 4227,\n        \"max\": 225928,\n        \"num_unique_values\": 2437,\n        \"samples\": [\n          128101,\n          55127,\n          164979\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"drugName\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 39,\n        \"samples\": [\n          \"Methamphetamine\",\n          \"Megace ES\",\n          \"Adipex-P\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"condition\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Obesity\",\n          \"Weight Loss\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"review\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2193,\n        \"samples\": [\n          \"\\\"Week 5 - I have reached the maximum 3.0 on the injection pen. This is what I have to say about week 5: &quot;so this is what it feels like not to be hungry, always totally obsessed with food and when and what I will be eating next!&quot; Woo Ho! I have had the best week! Been able to eat healthy meals, not pig out, stop when I&#039;m full and feel normal. I have lost about 10 kgs in 5 weeks. I am not exercising - just always busy and active. \\r\\r\\nFor fatigue and energy I take a multi, vitamin C, iron and Berroca when I need it for a boost. I will be getting a prescription to continue with this injection for another month and keep monitoring progress.\\\"\",\n          \"\\\"Tried it for a few days - just the one in AM. Nausea. Gas from the sulfur pits of hell.  The runs. Stomach pain. Jittery. sleepless. Of course I am not eating much. But. no. Just. No.\\\"\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 10,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          6,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"date\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 815,\n        \"min\": 39505,\n        \"max\": 43080,\n        \"num_unique_values\": 1310,\n        \"samples\": [\n          41000,\n          39927\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"usefulCount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 41,\n        \"min\": 0,\n        \"max\": 484,\n        \"num_unique_values\": 182,\n        \"samples\": [\n          30,\n          80\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rating_cleaned\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"condition_cleaned\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**1.2 B (5) In the text cell below, briefly describe and discuss (in paragraph format) the cleansing and preprocessing steps taken to prepare the data for analysis.**"
      ],
      "metadata": {
        "id": "kXHK0cFQaaTv"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "First we ran the info command to see if there were any columns with missing data.  None of the columns in this dataset are missing any data.  Because of this no column needs to be dropped and no data needs to be in filled in.\n",
        "\n",
        "Second, we created a “rating cleaned” column to take the range of ratings an change them to either positive and negative  ratings.  Before we added another column the ratings were from 0-10.  We added a new column called “rating_cleaned” which groups all ratings from 0-6 as (0) representing negative reviews and ratings from 7-10 as (1) representing positive reviews.  I was determined to make 7 the bench mark because 5 is neutral and not positive.\n",
        "\n",
        "Third, we created binary variables for the column “condition”.  The “condiction_cleaned” column was added where (1) represents weight loss and (0) represents obesity.  \n"
      ],
      "metadata": {
        "id": "5nxWa4OBapSi"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "---\n",
        "\n"
      ],
      "metadata": {
        "id": "dd2WmJKtn_z3"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 1.3 Data: Description & EDA (15)\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "pirkUREjEHAe"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**1.3 A (8) Use the code cell below (and add any additional cells, as necessary) to describe the data and perform exploratory data analysis.**\n",
        "\n",
        "**Description and EDA of the dataset should include: dataset overview, preview, dimensionality, visualization (text, target variable), descriptive statistics, and can include Cluster Analysis.**"
      ],
      "metadata": {
        "id": "lwe0F5H_ayY2"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_cSFtMtMsn6x",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 489
        },
        "outputId": "e6462968-6133-4ac1-e912-e4950b954a0c"
      },
      "source": [
        "weightloss.rating_cleaned.hist()\n",
        "plt.title('Histogram of Positive vs Negative Ratings')\n",
        "plt.xlabel('Rating')\n",
        "plt.ylabel('Frequency')\n",
        "plt.show()\n",
        "print('Positive label proportion: ', weightloss.rating_cleaned.mean())"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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AgMDhUql0vmeftpt91FRUXrbf/LnmxBCbN++XTRp0kSoVCrh7+8vvvrqKzF+/Hhhb2+vM6dnz57C29tbqFQq4e3tLQYOHCjOnDnzzF6QYRRCGHClF9FLLD09HU2aNMG3336LQYMGWbocIpPRvgChKV8SgUquV69eL/ySDWQ4XkNEsvbw4UO9sXnz5sHGxua5rxBNZC00Gg0KCgp0xnbt2oXff/9d701LyTye/Nlz9uxZbN68mZ8PC+IRIpK12NhYpKWloX379rC1tZVuC9deH0P0Mrh06RI6deqEwYMHw9vbG3/88QcWL14MFxcXHD9+XHpLCTIfLy8v6T0QL1++jEWLFiEvLw9HjhzRueuVzIeBiGQtJSUFsbGxOHnyJB48eICqVatiyJAhmDJlCt/Jml4a9+7dw8iRI7F3717cuHEDjo6O6NixI2bOnPnU9yAj0xo2bBh27tyJzMxMqNVqBAUFIS4u7pnvXUemxUBEREREssdriIiIiEj2GIiIiIhI9niRRAkUFRXh2rVrcHJyMslLuRMREZHxCSFw//59eHt7670R9ZMYiErg2rVr8PHxsXQZREREZICrV6+iSpUqz5zDQFQC2rcguHr1KpydnY26bo1Gg+TkZAQHB8POzs6o66a/sc/mwT6bB/tsPuy1eZiqz9nZ2fDx8dF5o++nYSAqAe1pMmdnZ5MEIgcHBzg7O/ObzYTYZ/Ngn82DfTYf9to8TN3nklzuwouqiYiISPYYiIiIiEj2GIiIiIhI9hiIiIiISPYYiIiIiEj2GIiIiIhI9hiIiIiISPYYiIiIiEj2GIiIiIhI9hiIiIiISPYYiIiIiEj2GIiIiIhI9hiIiIiISPYYiIiIiEj2GIiIiIhI9mwtXQAREREZV7V/bbJ0CaWiVgokNLdsDTxCRERERLLHQERERESyx0BEREREssdARERERLLHQERERESyx0BEREREssdARERERLLHQERERESyx0BEREREssdARERERLLHQERERESyx0BEREREssdARERERLLHQERERESyx0BEREREssdARERERLLHQERERESyx0BEREREsmfRQLR79250794d3t7eUCgU2LBhg85yhUJR7Mfs2bOlOdWqVdNbPnPmTJ31HD16FK1bt4a9vT18fHyQkJBgjt0jIiIiK2HRQJSTk4NGjRph4cKFxS7PyMjQ+Vi2bBkUCgX69u2rM2/69Ok689577z1pWXZ2NoKDg+Hr64u0tDTMnj0bMTExWLJkiUn3jYiIiKyHrSU3HhoaitDQ0Kcu9/T01Hn8448/on379qhevbrOuJOTk95crZUrVyI/Px/Lli2DSqVC/fr1kZ6ejsTERIwcOfLFd4KIiIisntVcQ5SVlYVNmzYhMjJSb9nMmTNRsWJFNGnSBLNnz0ZBQYG0LDU1FW3atIFKpZLGQkJCcPr0ady5c8cstRMREVHZZtEjRKWxYsUKODk5oU+fPjrj77//Ppo2bQo3Nzfs27cPkydPRkZGBhITEwEAmZmZ8PPz03mOh4eHtKxChQp628rLy0NeXp70ODs7GwCg0Wig0WiMul/a9Rl7vaSLfTYP9tk82GfzsdZeq5XC0iWUitrmcb2m+h1bElYTiJYtW4ZBgwbB3t5eZzw6Olr6f8OGDaFSqfDOO+8gPj4earXaoG3Fx8cjNjZWbzw5ORkODg4GrfN5UlJSTLJe0sU+mwf7bB7ss/lYW68Tmlu6AsMYu8+5ubklnmsVgWjPnj04ffo01qxZ89y5LVq0QEFBAS5duoTatWvD09MTWVlZOnO0j5923dHkyZN1glZ2djZ8fHwQHBwMZ2fnF9gTfRqNBikpKejcuTPs7OyMum76G/tsHuyzebDP5mOtvW4Qs9XSJZSK2kZgRrMio/dZe4anJKwiEC1duhSBgYFo1KjRc+emp6fDxsYG7u7uAICgoCBMmTIFGo1GanJKSgpq165d7OkyAFCr1cUeXbKzszPZN4Qp101/Y5/Ng302D/bZfKyt13mFCkuXYBBj97k067LoRdUPHjxAeno60tPTAQAXL15Eeno6rly5Is3Jzs7GunXrMHz4cL3np6amYt68efj9999x4cIFrFy5EuPGjcPgwYOlsBMWFgaVSoXIyEicOHECa9aswfz583WOABEREZG8WfQI0aFDh9C+fXvpsTakhIeHY/ny5QCA1atXQwiBgQMH6j1frVZj9erViImJQV5eHvz8/DBu3DidsOPi4oLk5GRERUUhMDAQlSpVwtSpU3nLPREREUksGojatWsHIZ59JfzIkSOfGl6aNm2K/fv3P3c7DRs2xJ49ewyqkYiIiF5+VvM6RERERESmwkBEREREssdARERERLLHQERERESyx0BEREREssdARERERLLHQERERESyx0BEREREssdARERERLLHQERERESyx0BEREREssdARERERLLHQERERESyx0BEREREssdARERERLLHQERERESyx0BEREREssdARERERLLHQERERESyx0BEREREssdARERERLLHQERERESyx0BEREREssdARERERLLHQERERESyx0BEREREssdARERERLLHQERERESyx0BEREREssdARERERLLHQERERESyx0BEREREssdARERERLLHQERERESyx0BEREREssdARERERLJn0UC0e/dudO/eHd7e3lAoFNiwYYPO8oiICCgUCp2PLl266My5ffs2Bg0aBGdnZ7i6uiIyMhIPHjzQmXP06FG0bt0a9vb28PHxQUJCgql3jYiIiKyIRQNRTk4OGjVqhIULFz51TpcuXZCRkSF9fPfddzrLBw0ahBMnTiAlJQUbN27E7t27MXLkSGl5dnY2goOD4evri7S0NMyePRsxMTFYsmSJyfaLiIiIrIutJTceGhqK0NDQZ85Rq9Xw9PQsdtmpU6ewZcsW/Pbbb2jWrBkAYMGCBejatSvmzJkDb29vrFy5Evn5+Vi2bBlUKhXq16+P9PR0JCYm6gQnIiIiki+LBqKS2LVrF9zd3VGhQgV06NABn376KSpWrAgASE1NhaurqxSGAKBTp06wsbHBgQMH0Lt3b6SmpqJNmzZQqVTSnJCQEMyaNQt37txBhQoV9LaZl5eHvLw86XF2djYAQKPRQKPRGHX/tOsz9npJF/tsHuyzebDP5mOtvVYrhaVLKBW1zeN6TfU7tiTKdCDq0qUL+vTpAz8/P5w/fx4fffQRQkNDkZqaCqVSiczMTLi7u+s8x9bWFm5ubsjMzAQAZGZmws/PT2eOh4eHtKy4QBQfH4/Y2Fi98eTkZDg4OBhr93SkpKSYZL2ki302D/bZPNhn87G2Xic0t3QFhjF2n3Nzc0s8t0wHogEDBkj/DwgIQMOGDeHv749du3ahY8eOJtvu5MmTER0dLT3Ozs6Gj48PgoOD4ezsbNRtaTQapKSkoHPnzrCzszPquulv7LN5sM/mwT6bj7X2ukHMVkuXUCpqG4EZzYqM3mftGZ6SKNOB6EnVq1dHpUqVcO7cOXTs2BGenp64fv26zpyCggLcvn1buu7I09MTWVlZOnO0j592bZJarYZardYbt7OzM9k3hCnXTX9jn82DfTYP9tl8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ODi84F4Vb0azIpOs11Q2b95s6RIMkpKSYukSZIF9Ng/22XysrdcJzS1dgWGM3efc3NwSzy3TgSg0NFT6f8OGDdGiRQv4+vpi7dq1KFeunMm2O3nyZERHR0uPs7Oz4ePjg+DgYDg7Oxt1WxqNBikpKfjkkA3yiqznvcyOx4RYuoRS0fa5c+fOsLOzs3Q5Ly322TzYZ/Ox1l43iNlq6RJKRW0jMKNZkdH7rD3DUxJlOhA9ydXVFbVq1cK5c+fQuXNn5Ofn4+7duzpHibKysqRrjjw9PXHw4EGddWjvQivuuiQttVoNtVqtN25nZ2eyb4i8IoVVvbmrNf1g+CdTfg7pb+yzebDP5mNtvbam3yf/ZOw+l2ZdZfq2+yc9ePAA58+fh5eXFwIDA2FnZ4ft27dLy0+fPo0rV64gKCgIABAUFIRjx47h+vXr0pyUlBQ4OzujXr16Zq+fiIiIyqYyfYRowoQJ6N69O3x9fXHt2jVMmzYNSqUSAwcOhIuLCyIjIxEdHQ03Nzc4OzvjvffeQ1BQEF577TUAQHBwMOrVq4chQ4YgISEBmZmZ+PjjjxEVFVXsESAiIiKSpzIdiP78808MHDgQt27dQuXKldGqVSvs378flStXBgDMnTsXNjY26Nu3L/Ly8hASEoIvvvhCer5SqcTGjRsxatQoBAUFwdHREeHh4Zg+fbqldomIiIjKoDIdiFavXv3M5fb29li4cCEWLlz41Dm+vr5We0cUERERmYdVXUNEREREZAoMRERERCR7DEREREQkewxEREREJHsMRERERCR7DEREREQkewxEREREJHsMRERERCR7DEREREQkewxEREREJHsMRERERCR7DEREREQkewxEREREJHsMRERERCR7DEREREQkewxEREREJHsMRERERCR7DEREREQkewxEREREJHsMRERERCR7DEREREQkewxEREREJHsMRERERCR7DEREREQkewxEREREJHsMRERERCR7DEREREQkewxEREREJHsMRERERCR7DEREREQkewxEREREJHsMRERERCR7DEREREQkewxEREREJHsMRERERCR7DEREREQke2U6EMXHx+PVV1+Fk5MT3N3d0atXL5w+fVpnTrt27aBQKHQ+3n33XZ05V65cQbdu3eDg4AB3d3dMnDgRBQUF5twVIiIiKsNsLV3As/zyyy+IiorCq6++ioKCAnz00UcIDg7GyZMn4ejoKM0bMWIEpk+fLj12cHCQ/l9YWIhu3brB09MT+/btQ0ZGBoYOHQo7OzvExcWZdX+IiIiobCrTgWjLli06j5cvXw53d3ekpaWhTZs20riDgwM8PT2LXUdycjJOnjyJbdu2wcPDA40bN8aMGTMwadIkxMTEQKVSmXQfiIiIqOwr04HoSffu3QMAuLm56YyvXLkS3377LTw9PdG9e3d88skn0lGi1NRUBAQEwMPDQ5ofEhKCUaNG4cSJE2jSpInedvLy8pCXlyc9zs7OBgBoNBpoNBqj7pN2fWobYdT1mpqx+2Bq2nqtrW5rwz6bB/tsPtbaa7XSun6naH8Hmup3bEkohBBW0bWioiL06NEDd+/exa+//iqNL1myBL6+vvD29sbRo0cxadIkNG/eHOvXrwcAjBw5EpcvX8bWrVul5+Tm5sLR0RGbN29GaGio3rZiYmIQGxurN75q1Sqd03FERERUduXm5iIsLAz37t2Ds7PzM+dazRGiqKgoHD9+XCcMAY8Dj1ZAQAC8vLzQsWNHnD9/Hv7+/gZta/LkyYiOjpYeZ2dnw8fHB8HBwc9taGlpNBqkpKTgk0M2yCtSGHXdpnQ8JsTSJZSKts+dO3eGnZ2dpct5abHP5sE+m4+19rpBzNbnTypD1DYCM5oVGb3P2jM8JWEVgWjMmDHYuHEjdu/ejSpVqjxzbosWLQAA586dg7+/Pzw9PXHw4EGdOVlZWQDw1OuO1Go11Gq13ridnZ3JviHyihTIK7SeQGRNPxj+yZSfQ/ob+2we7LP5WFuvren3yT8Zu8+lWVeZvu1eCIExY8bghx9+wI4dO+Dn5/fc56SnpwMAvLy8AABBQUE4duwYrl+/Ls1JSUmBs7Mz6tWrZ5K6iYiIyLqU6SNEUVFRWLVqFX788Uc4OTkhMzMTAODi4oJy5crh/PnzWLVqFbp27YqKFSvi6NGjGDduHNq0aYOGDRsCAIKDg1GvXj0MGTIECQkJyMzMxMcff4yoqKhijwIRERGR/JTpI0SLFi3CvXv30K5dO3h5eUkfa9asAQCoVCps27YNwcHBqFOnDsaPH4++ffvi//7v/6R1KJVKbNy4EUqlEkFBQRg8eDCGDh2q87pFREREJG9l+gjR826A8/HxwS+//PLc9fj6+mLz5s3GKouIiIheMmX6CBERERGROTAQERERkewxEBEREZHsMRARERGR7DEQERERkewxEBEREZHsMRARERGR7DEQERERkewxEBEREZHsMRARERGR7DEQERERkewxEBEREZHsMRARERGR7DEQERERkewxEBEREZHsMRARERGR7DEQERERkewxEBEREZHsMRARERGR7DEQERERkewxEBEREZHsMRARERGR7DEQERERkewxEBEREZHsMRARERGR7DEQERERkewxEBEREZHsMRARERGR7DEQERERkewxEBEREZHsMRARERGR7DEQERERkewxEBEREZHsMRARERGR7DEQERERkezJKhAtXLgQ1apVg729PVq0aIGDBw9auiQiIiIqA2QTiNasWYPo6GhMmzYNhw8fRqNGjRASEoLr169bujQiIiKyMNkEosTERIwYMQLDhg1DvXr1sHjxYjg4OGDZsmWWLo2IiIgsTBaBKD8/H2lpaejUqZM0ZmNjg06dOiE1NdWClREREVFZYGvpAszh5s2bKCwshIeHh864h4cH/vjjD735eXl5yMvLkx7fu3cPAHD79m1oNBqj1qbRaJCbmwtbjQ0KixRGXbcp3bp1y9IllIq2z7du3YKdnZ2ly3lpsc/mwT6bj7X22rYgx9IllIptkUBubpHR+3z//n0AgBDi+TUYbasvkfj4eMTGxuqN+/n5WaCasqnSZ5augIiIXiZhJlz3/fv34eLi8sw5sghElSpVglKpRFZWls54VlYWPD099eZPnjwZ0dHR0uOioiLcvn0bFStWhEJh3KM42dnZ8PHxwdWrV+Hs7GzUddPf2GfzYJ/Ng302H/baPEzVZyEE7t+/D29v7+fOlUUgUqlUCAwMxPbt29GrVy8Aj0PO9u3bMWbMGL35arUaarVaZ8zV1dWkNTo7O/ObzQzYZ/Ngn82DfTYf9to8TNHn5x0Z0pJFIAKA6OhohIeHo1mzZmjevDnmzZuHnJwcDBs2zNKlERERkYXJJhD1798fN27cwNSpU5GZmYnGjRtjy5YtehdaExERkfzIJhABwJgxY4o9RWZJarUa06ZN0ztFR8bFPpsH+2we7LP5sNfmURb6rBAluReNiIiI6CUmixdmJCIiInoWBiIiIiKSPQYiIiIikj0GIiIiIpI9BiIzWLhwIapVqwZ7e3u0aNECBw8efOb8devWoU6dOrC3t0dAQAA2b95spkqtW2n6/N//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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Positive label proportion:  0.7702092736971686\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "weightloss.condition_cleaned.hist()\n",
        "plt.xlabel('Condition Cleaned')\n",
        "plt.ylabel('Frequency')\n",
        "plt.title('Histogram showing Weight Loss (1) and Obesity (0)')\n",
        "plt.show()\n",
        "print('Positive label proportion: ', weightloss.condition_cleaned.mean())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 489
        },
        "id": "aoV72FqUdPG5",
        "outputId": "9b384b14-e7ea-4b9a-c562-da598f5c41ec"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAkQAAAHHCAYAAABeLEexAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAABYYElEQVR4nO3deVhU1R8G8HfYhl1EBSRxzX1JBUXcFwSXzK1yIUUjtQQ30srMfcc1zVxaxApzKVMzRRDNlVxQ1JBQc0/BBZEtcYDz+8Nn7s9hQAFnYbrv53l8as49997vPTPDvHO3UQghBIiIiIhkzMzYBRAREREZGwMRERERyR4DEREREckeAxERERHJHgMRERERyR4DEREREckeAxERERHJHgMRERERyR4DEREREckeA5GMVK9eHcOGDTN2Gf9Jv//+OxQKBX766Sdjl/Kff57VY/3777+Xet6y8DwZ082bN2FtbY2jR4+WeN4HDx7Azs4Ou3fv1kNlL6djx47o2LGjXpatUCgQEhKil2UXJTw8HAqFAteuXTPI+k6cOAErKytcv369xPNGRkbC3t4e9+7d00NlhsFAZKLUb5RTp04VOr1jx45o1KjRS69n9+7dmDFjxksvh/7b8vLy4OjoiN69e2tNW7ZsGRQKBQIDA7WmTZs2DQqFAhcvXjREmSWyceNGLF++vNj9q1evjtdff11/BenQrFmz4O3tjTZt2khtSUlJmDBhAlq3bg1ra+siP4grVKiA9957D1OnTjVgxbqnUqmwYsUKtGjRAg4ODrC3t0eLFi2wYsUKqFQqY5dXpC+//BLh4eF6WfaUKVMwaNAgVKtWTaM9MTER3bp1g729PZydnTFkyBCt4NOtWze8+uqrmD9/vl5qMwQGIhlJSkrCV199VaJ5du/ejZkzZ+qpItKH0jzPL8vc3BytWrXCsWPHtKYdPXoUFhYWhe6NOHr0KFxcXFCnTp1ir6t9+/b4999/0b59+5eq+UVKGohMxb1797Bhwwa8//77Gu2xsbFYsWIFMjIyUL9+/ecu4/3338fp06exf/9+fZaqN1lZWejatSvGjRsHNzc3LFiwAIsWLYK7uzvGjRuHrl27Iisry9hlYsiQIfj33381Aoq+AlF8fDz27dun9bq4desW2rdvj8uXL2PevHmYOHEifvvtN3Tt2hVPnjzR6Dtq1CisXbsWGRkZOq/PEBiIZESpVMLS0tLYZZRIWfijZGqM9Ty3bdsW9+/fR2Jiokb70aNH8fbbb+Pvv/9GcnKy1J6bm4vjx49r7KUoDjMzM1hbW8PMjH++SuOHH36AhYUFevXqpdH+xhtvIC0tDefPn0dAQMBzl1G/fn00atRIb3sq9C00NBQHDx7EypUr8euvvyI4OBgffPABduzYgS+++AIHDx7ExIkTjV0mzM3Npb11+rZ+/XpUrVoVrVq10mifN28esrKysH//fowdOxaffvoptmzZgrNnz2o9//3790dOTg62bt2q93r1gX9RZKTguSUqlQozZ85E7dq1YW1tjQoVKqBt27aIjo4GAAwbNgyrVq0C8PT4ufqfWlZWFj788EN4eHhAqVSibt26WLx4MYQQGuv9999/MXbsWFSsWBEODg5444038M8//0ChUGgcjpsxYwYUCgUuXLiAwYMHo3z58mjbti0A4Ny5cxg2bBhq1qwJa2truLm54d1338WDBw801qVexsWLF/HOO++gXLlyqFSpEqZOnQohBG7evInevXvD0dERbm5uWLJkSbHGLjo6Gm3btoWTkxPs7e1Rt25dfPrpp1r98vPzMXfuXFSpUgXW1tbo0qULLl++rNVv69at8PT0hI2NDSpWrIh33nkH//zzjzR9586dUCgUOHfunNT2888/Q6FQoF+/fhrLql+/PgYMGCA9Lvg8qw+vHj16FKGhoahUqRLs7OzQt29frd3e+fn5mDFjBtzd3WFra4tOnTrhwoULxTovSf1cPbsn6MqVK0hOTkZISIjWOSvx8fHIysqS5gOAv/76C2+++SacnZ1hbW0NLy8v7Ny5U2M9RZ1DtGrVKtSsWRM2NjZo2bIlDh8+XOQ5JS96njp27IjffvsN169fl1731atXf+72F0dubi5mz56NWrVqQalUonr16vj000+Rk5Oj0e/UqVPw9/dHxYoVYWNjgxo1auDdd9/V6LNp0yZ4enrCwcEBjo6OaNy4MT7//PMX1rB9+3Z4e3vD3t5eo93Z2RkODg7F3pauXbvi119/1Xq/F5SamoqJEyeicePGsLe3h6OjI7p3746zZ89q9FM/r1u2bCnWe2jdunWoVauWxvNdHLdu3cI333yDzp07F3pOUHBwMDp16oSvv/4at27d0poeERGBunXrwtraGp6enjh06JBWn3/++QfvvvsuXF1d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HetGM/Yau4QSUZoJzPbK1/k4q4/wFEeZD0TqMHT9+nXs379fI5C4ubnh7t27Gv1zc3ORmpoKNzc3qU9KSopGH/VjdZ+ClEollEqlVrulpaXe3hD6XDb9H8fZMDjOhsFxNhxTG+ucPIWxSygVXY9zSZZVpgOROgxdunQJBw4cQIUKFTSm+/j4IC0tDXFxcfD09AQA7N+/H/n5+fD29pb6TJkyBSqVShqY6Oho1K1bt9DDZcbSaMZek3oBX1vQ09glEBER6YxRL7vPzMxEfHw84uPjAQBXr15FfHw8bty4AZVKhTfffBOnTp1CREQE8vLykJycjOTkZDx58gQAUL9+fXTr1g0jRozAiRMncPToUYSEhGDgwIFwd3cHAAwePBhWVlYICgpCQkICNm/ejM8//1zjkBgRERHJm1H3EJ06dQqdOnWSHqtDSmBgIGbMmIGdO3cCAJo2baox34EDB9CxY0cAQEREBEJCQtClSxeYmZmhf//+WLFihdS3XLlyiIqKQnBwMDw9PVGxYkVMmzaNl9wTERGRxKiBqGPHjhCi6EsDnzdNzdnZGRs3bnxunyZNmuDw4cMlro+IiIjkgb9lRkRERLLHQERERESyx0BEREREssdARERERLLHQERERESyx0BEREREssdARERERLLHQERERESyx0BEREREssdARERERLLHQERERESyx0BEREREssdARERERLLHQERERESyx0BEREREssdARERERLLHQERERESyx0BEREREssdARERERLLHQERERESyx0BEREREssdARERERLLHQERERESyx0BEREREssdARERERLLHQERERESyx0BEREREssdARERERLLHQERERESyx0BEREREssdARERERLLHQERERESyx0BEREREssdARERERLLHQERERESyx0BEREREssdARERERLLHQERERESyx0BEREREssdARERERLLHQERERESyx0BEREREssdARERERLLHQERERESyx0BEREREsmfUQHTo0CH06tUL7u7uUCgU2L59u8Z0IQSmTZuGypUrw8bGBr6+vrh06ZJGn9TUVAQEBMDR0RFOTk4ICgpCZmamRp9z586hXbt2sLa2hoeHB8LCwvS9aURERGRCjBqIsrKy8Nprr2HVqlWFTg8LC8OKFSuwZs0aHD9+HHZ2dvD398fjx4+lPgEBAUhISEB0dDR27dqFQ4cOYeTIkdL09PR0+Pn5oVq1aoiLi8OiRYswY8YMrFu3Tu/bR0RERKbBwpgr7969O7p3717oNCEEli9fjs8++wy9e/cGAHz33XdwdXXF9u3bMXDgQCQmJiIyMhInT56El5cXAGDlypXo0aMHFi9eDHd3d0RERODJkyf49ttvYWVlhYYNGyI+Ph5Lly7VCE5EREQkX2X2HKKrV68iOTkZvr6+Ulu5cuXg7e2N2NhYAEBsbCycnJykMAQAvr6+MDMzw/Hjx6U+7du3h5WVldTH398fSUlJePjwoYG2hoiIiMoyo+4hep7k5GQAgKurq0a7q6urNC05ORkuLi4a0y0sLODs7KzRp0aNGlrLUE8rX7681rpzcnKQk5MjPU5PTwcAqFQqqFSql9ksLerlKc2ETperb7oeB31T12tqdZsajrNhcJwNx1THWmluWp8p6s9AfX3GFkeZDUTGNH/+fMycOVOrPSoqCra2tnpZ52yvfL0sV192795t7BJKJTo62tglyALH2TA4zoZjamMd1tLYFZSOrsc5Ozu72H3LbCByc3MDAKSkpKBy5cpSe0pKCpo2bSr1uXv3rsZ8ubm5SE1NleZ3c3NDSkqKRh/1Y3WfgiZPnozQ0FDpcXp6Ojw8PODn5wdHR8eX27ACVCoVoqOjMfWUGXLyFTpdtj79OcPf2CWUiHqcu3btCktLS2OX85/FcTYMjrPhmOpYN5qx19gllIjSTGC2V77Ox1l9hKc4ymwgqlGjBtzc3BATEyMFoPT0dBw/fhwffPABAMDHxwdpaWmIi4uDp6cnAGD//v3Iz8+Ht7e31GfKlClQqVTSIEdHR6Nu3bqFHi4DAKVSCaVSqdVuaWmptzdETr4COXmmE4hM6Q/Ds/T5HNL/cZwNg+NsOKY21qb0efIsXY9zSZZl1JOqMzMzER8fj/j4eABPT6SOj4/HjRs3oFAoMH78eMyZMwc7d+7E+fPnMXToULi7u6NPnz4AgPr166Nbt24YMWIETpw4gaNHjyIkJAQDBw6Eu7s7AGDw4MGwsrJCUFAQEhISsHnzZnz++ecae4CIiIhI3oy6h+jUqVPo1KmT9FgdUgIDAxEeHo6PPvoIWVlZGDlyJNLS0tC2bVtERkbC2tpamiciIgIhISHo0qULzMzM0L9/f6xYsUKaXq5cOURFRSE4OBienp6oWLEipk2bxkvuiYiISGLUQNSxY0cIUfSZ8AqFArNmzcKsWbOK7OPs7IyNGzc+dz1NmjTB4cOHS10nERER/beV2fsQERERERkKAxERERHJHgMRERERyR4DEREREckeAxERERHJHgMRERERyR4DEREREckeAxERERHJHgMRERERyR4DEREREckeAxERERHJHgMRERERyR4DEREREckeAxERERHJHgMRERERyR4DEREREckeAxERERHJHgMRERERyR4DEREREckeAxERERHJHgMRERERyR4DEREREckeAxERERHJHgMRERERyR4DEREREckeAxERERHJHgMRERERyR4DEREREckeAxERERHJHgMRERERyR4DEREREckeAxERERHJHgMRERERyR4DEREREckeAxERERHJHgMRERERyR4DEREREckeAxERERHJHgMRERERyR4DEREREckeAxERERHJHgMRERERyR4DEREREckeAxERERHJHgMRERERyR4DEREREclemQ5EeXl5mDp1KmrUqAEbGxvUqlULs2fPhhBC6iOEwLRp01C5cmXY2NjA19cXly5d0lhOamoqAgIC4OjoCCcnJwQFBSEzM9PQm0NERERlVJkORAsXLsTq1avxxRdfIDExEQsXLkRYWBhWrlwp9QkLC8OKFSuwZs0aHD9+HHZ2dvD398fjx4+lPgEBAUhISEB0dDR27dqFQ4cOYeTIkcbYJCIiIiqDLIxdwPMcO3YMvXv3Rs+ePQEA1atXx48//ogTJ04AeLp3aPny5fjss8/Qu3dvAMB3330HV1dXbN++HQMHDkRiYiIiIyNx8uRJeHl5AQBWrlyJHj16YPHixXB3dzfOxhEREVGZUaYDUevWrbFu3TpcvHgRderUwdmzZ3HkyBEsXboUAHD16lUkJyfD19dXmqdcuXLw9vZGbGwsBg4ciNjYWDg5OUlhCAB8fX1hZmaG48ePo2/fvlrrzcnJQU5OjvQ4PT0dAKBSqaBSqXS6jerlKc3EC3qWLboeB31T12tqdZsajrNhcJwNx1THWmluWp8p6s9AfX3GFkeZDkSffPIJ0tPTUa9ePZibmyMvLw9z585FQEAAACA5ORkA4OrqqjGfq6urNC05ORkuLi4a0y0sLODs7Cz1KWj+/PmYOXOmVntUVBRsbW1fersKM9srXy/L1Zfdu3cbu4RSiY6ONnYJ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43feeUenxRAREREZQ4kC0fr16/VVBxEREZHRvNRJ1URERET/BQxEREREJHsMRERERCR7DEREREQkewxEREREJHsMRERERCR7DEREREQkewxEREREJHsMRERERCR7DEREREQkewxEREREJHsMRERERCR7DEREREQkewxEREREJHsMRERERCR7DEREREQkewxEREREJHsMRERERCR7DEREREQkewxEREREJHsMRERERCR7DEREREQkewxEREREJHsMRERERCR7DEREREQkewxEREREJHsMRERERCR7DEREREQkewxEREREJHsMRERERCR7JhWIFixYAIVCgfHjx0ttjx8/RnBwMCpUqAB7e3v0798fKSkpGvPduHEDPXv2hK2tLVxcXDBp0iTk5uYauHoiIiIqq0wmEJ08eRJr165FkyZNNNonTJiAX3/9FVu3bsXBgwdx+/Zt9OvXT5qel5eHnj174smTJzh27Bg2bNiA8PBwTJs2zdCbQERERGWUSQSizMxMBAQE4KuvvkL58uWl9kePHuGbb77B0qVL0blzZ3h6emL9+vU4duwY/vjjDwBAVFQULly4gB9++AFNmzZF9+7dMXv2bKxatQpPnjwx1iYRERFRGWJh7AKKIzg4GD179oSvry/mzJkjtcfFxUGlUsHX11dqq1evHqpWrYrY2Fi0atUKsbGxaNy4MVxdXaU+/v7++OCDD5CQkIBmzZpprS8nJwc5OTnS4/T0dACASqWCSqXS6bapl6c0Ezpdrr7pehz0TV2vqdVtajjOhsFxNhxTHWuluWl9pqg/A/X1GVscZT4Qbdq0CadPn8bJkye1piUnJ8PKygpOTk4a7a6urkhOTpb6PBuG1NPV0wozf/58zJw5U6s9KioKtra2pdmMF5rtla+X5erL7t27jV1CqURHRxu7BFngOBsGx9lwTG2sw1oau4LS0fU4Z2dnF7tvmQ5EN2/exLhx4xAdHQ1ra2uDrXfy5MkIDQ2VHqenp8PDwwN+fn5wdHTU6bpUKhWio6Mx9ZQZcvIVOl22Pv05w9/YJZSIepy7du0KS0tLY5fzn8VxNgyOs+GY6lg3mrHX2CWUiNJMYLZXvs7HWX2EpzjKdCCKi4vD3bt30bx5c6ktLy8Phw4dwhdffIG9e/fiyZMnSEtL09hLlJKSAjc3NwCAm5sbTpw4obFc9VVo6j4FKZVK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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Positive label proportion:  0.512105047189167\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "vectorizer = TfidfVectorizer()\n",
        "X = vectorizer.fit_transform(weightloss)"
      ],
      "metadata": {
        "id": "oKSejKc1IIoN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "features = weightloss[['condition_cleaned', 'rating_cleaned']] # Replace with actual feature columns\n",
        "# Standardize the data\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "scaler = StandardScaler()\n",
        "X = scaler.fit_transform(features) # Elbow method to find the optimal number of clusters\n",
        "Sum_of_squared_distances = []\n",
        "K = range(2, 15)\n",
        "for k in K:\n",
        "  km = KMeans(n_clusters=k, random_state=123)\n",
        "  km = km.fit(X)\n",
        "  Sum_of_squared_distances.append(km.inertia_) # Plot the elbow graph\n",
        "plt.plot(K, Sum_of_squared_distances, 'bx-')\n",
        "plt.xlabel('k')\n",
        "plt.ylabel('Sum_of_squared_distances')\n",
        "plt.title('Elbow Method For Optimal k')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 857
        },
        "id": "Rxd9sV04JczG",
        "outputId": "6323d32b-1f2a-4c0d-e2dc-83db1dfbfb30"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:1473: ConvergenceWarning: Number of distinct clusters (4) found smaller than n_clusters (5). Possibly due to duplicate points in X.\n",
            "  return fit_method(estimator, *args, **kwargs)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:1473: ConvergenceWarning: Number of distinct clusters (4) found smaller than n_clusters (6). Possibly due to duplicate points in X.\n",
            "  return fit_method(estimator, *args, **kwargs)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:1473: ConvergenceWarning: Number of distinct clusters (4) found smaller than n_clusters (7). Possibly due to duplicate points in X.\n",
            "  return fit_method(estimator, *args, **kwargs)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:1473: ConvergenceWarning: Number of distinct clusters (4) found smaller than n_clusters (8). Possibly due to duplicate points in X.\n",
            "  return fit_method(estimator, *args, **kwargs)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:1473: ConvergenceWarning: Number of distinct clusters (4) found smaller than n_clusters (9). Possibly due to duplicate points in X.\n",
            "  return fit_method(estimator, *args, **kwargs)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:1473: ConvergenceWarning: Number of distinct clusters (4) found smaller than n_clusters (10). Possibly due to duplicate points in X.\n",
            "  return fit_method(estimator, *args, **kwargs)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:1473: ConvergenceWarning: Number of distinct clusters (4) found smaller than n_clusters (11). Possibly due to duplicate points in X.\n",
            "  return fit_method(estimator, *args, **kwargs)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:1473: ConvergenceWarning: Number of distinct clusters (4) found smaller than n_clusters (12). Possibly due to duplicate points in X.\n",
            "  return fit_method(estimator, *args, **kwargs)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:1473: ConvergenceWarning: Number of distinct clusters (4) found smaller than n_clusters (13). Possibly due to duplicate points in X.\n",
            "  return fit_method(estimator, *args, **kwargs)\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:1473: ConvergenceWarning: Number of distinct clusters (4) found smaller than n_clusters (14). Possibly due to duplicate points in X.\n",
            "  return fit_method(estimator, *args, **kwargs)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Elbow Method For Optimal k')"
            ]
          },
          "metadata": {},
          "execution_count": 16
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Assuming weightloss is your DataFrame\n",
        "# Select relevant features for clustering\n",
        "features = weightloss[['condition_cleaned', 'rating_cleaned']] # Replace with actual feature columns\n",
        "# Standardize the data\n",
        "scaler = StandardScaler()\n",
        "X = scaler.fit_transform(features)\n",
        "\n",
        "# Apply K-means clustering with 4 clusters\n",
        "kmeans = KMeans(n_clusters=4, random_state=123)\n",
        "kmeans.fit(X)\n",
        "# Add the cluster labels to the DataFrame\n",
        "weightloss['cluster'] = kmeans.labels_ # Visualize the clusters (using the first two features for simplicity)\n",
        "plt.scatter(weightloss['condition_cleaned'], weightloss['rating_cleaned'], c=weightloss['cluster'], cmap='viridis')\n",
        "plt.xlabel('condition_cleaned')\n",
        "plt.ylabel('rating_cleaned')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "wvYe3p5aLJVr",
        "outputId": "0bbad047-d8b5-44f8-88c0-bdbf46ac0599"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'rating_cleaned')"
            ]
          },
          "metadata": {},
          "execution_count": 17
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**1.3 B (7) In the text cell below, describe (in paragraph format) the dataset and any important findings from your description and EDA. A discussion of class imbalance should also be included if present.**"
      ],
      "metadata": {
        "id": "9yN-d0PebV2e"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "The first histogram shows the distribution of Positive vs negative reviews.  As you can see the reviews are approximately 77% positive.  That means that approximately 77% of the people on the medication rate it positively.  \n",
        "The second histogram shows the distribution what the people who left a review use the medication for.  The majority of people us the medication for weight loss and not for obesity.  However there is only about a 2% difference between the two which means the distribution is pretty equal.\n",
        "We also attempted to cluster by finding the optimal K.  On the graph there is a clear elbow at 4 which indicates the 4 different variables  in play in this analysis.  The clustering plot shows 4 distinct differences in the corners of the graph .  Clustering does not prove effective in this case.  \n"
      ],
      "metadata": {
        "id": "yTLGIhULb_ei"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "---\n",
        "\n",
        "<br>\n",
        "\n"
      ],
      "metadata": {
        "id": "PzXk7L--EUn8"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Part 2 (50)**"
      ],
      "metadata": {
        "id": "8fZ_eKishBVo"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Directions\n",
        "\n",
        "Include your code and any required written information immediately under the relevant sections or prompts in the space provided.\n",
        "\n",
        "You will include all prerequisite code (load packages, etc.) necessary for your code in Part 2  to run in the [Prerequisite Code](#scrollTo=FJpS12HuCNnE) Section below.\n",
        "\n",
        "You will submit your code and written responses in this .ipynb template notebook in the space provided under the sectioned prompts. Under the prompts there are code and/or text cells provided. If additional cells are needed, add the cells under the appropriate heading.\n",
        "\n",
        "Your Synthesis Assignment Part 2 submission should include all Part 1 and Part 2 code and responses (with all code run).\n",
        "\n",
        "Your code and written responses should be easy for someone who did not write the code or perform the analysis to follow. Points will be deducted for extraneous code or if file naming instructions are not followed.\n",
        "\n",
        "<br>\n",
        "\n",
        "\n",
        "**Submission:**\n",
        "\n",
        "**Due:** 12/15 at 11:59 PM ET\n",
        "\n",
        "**Points:** 50\n",
        "\n",
        "Your submission (one per group) for Part 2 will include:\n",
        "*  (1) .ipynb file (with all code run), following the naming instructions above\n",
        "* (1) .pdf of the .ipynb file (with all code run). Can be obtained using File -> Print.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "ldpsAZsEspNS"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 2.0 Prerequisite Code"
      ],
      "metadata": {
        "id": "FJpS12HuCNnE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer, TfidfVectorizer\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.naive_bayes import MultinomialNB, ComplementNB\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\n",
        "from sklearn.neural_network import MLPClassifier\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.metrics import (\n",
        "    classification_report,\n",
        "    recall_score,\n",
        "    precision_score,\n",
        "    f1_score,\n",
        "    roc_curve,\n",
        "    auc,\n",
        "    precision_recall_curve,\n",
        "    roc_auc_score\n",
        ")\n",
        "\n",
        "# TensorFlow and Keras\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.models import Sequential, load_model\n",
        "from tensorflow.keras.layers import (\n",
        "    Dense, Flatten, LSTM, Conv1D, GlobalMaxPooling1D, Dropout, Activation, Input, Embedding\n",
        ")\n",
        "from tensorflow.keras.preprocessing.text import Tokenizer\n",
        "from tensorflow.keras.utils import pad_sequences\n",
        "from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\n",
        "from tensorflow.keras.metrics import *\n",
        "from tensorflow.keras.backend import clear_session\n",
        "from tensorflow.keras.initializers import Constant\n",
        "\n",
        "# NLP\n",
        "import spacy"
      ],
      "metadata": {
        "id": "2l3Ki6YXCIWl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 2.1 Analysis (25)"
      ],
      "metadata": {
        "id": "e5FGl8IDhUDB"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "2.1 (25) Perform (at least) 3 types of classification analysis demonstrated in the course. At least one type must be a deep learning model using either a pre-trained or data-trained embedding layer.**"
      ],
      "metadata": {
        "id": "lB2_BoXivQkm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#creating sentiment\n",
        "weightloss_data['sentiment'] = weightloss_data['rating'].replace({1:1, 2:1, 3:1, 4:1, 5:1, 6:1,7:1,8:0 ,9:0, 10:0})"
      ],
      "metadata": {
        "id": "Du_XOeGVhSwd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "weightloss_data.sentiment.value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 178
        },
        "id": "Fwlewsl_Rv8Z",
        "outputId": "d8954bb2-b3eb-4325-d9ec-b0a9d71d2493"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "sentiment\n",
              "0    1758\n",
              "1     679\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>sentiment</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1758</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>679</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#split training and test data\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "X = weightloss_data['review']\n",
        "y = weightloss_data['sentiment']\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=831)"
      ],
      "metadata": {
        "id": "wu9IJlcWR15S"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Define and build a pipeline for Multinomial Naive Bayes classification to predict the rating sentiment\n",
        "nb_sent = Pipeline([\n",
        "                    ('vect', CountVectorizer(stop_words = 'english')),\n",
        "                    ('tfidf', TfidfTransformer()),\n",
        "                    ('nb', MultinomialNB()),\n",
        "                    ])\n",
        "\n",
        "nb_sent.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 180
        },
        "id": "SjO92HrlR5cy",
        "outputId": "145c5781-2124-452a-9f64-92fb553e0943"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Pipeline(steps=[('vect', CountVectorizer(stop_words='english')),\n",
              "                ('tfidf', TfidfTransformer()), ('nb', MultinomialNB())])"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: black;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: block;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 1ex;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;vect&#x27;, CountVectorizer(stop_words=&#x27;english&#x27;)),\n",
              "                (&#x27;tfidf&#x27;, TfidfTransformer()), (&#x27;nb&#x27;, MultinomialNB())])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;Pipeline<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.pipeline.Pipeline.html\">?<span>Documentation for Pipeline</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>Pipeline(steps=[(&#x27;vect&#x27;, CountVectorizer(stop_words=&#x27;english&#x27;)),\n",
              "                (&#x27;tfidf&#x27;, TfidfTransformer()), (&#x27;nb&#x27;, MultinomialNB())])</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;CountVectorizer<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.feature_extraction.text.CountVectorizer.html\">?<span>Documentation for CountVectorizer</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>CountVectorizer(stop_words=&#x27;english&#x27;)</pre></div> </div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;TfidfTransformer<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.feature_extraction.text.TfidfTransformer.html\">?<span>Documentation for TfidfTransformer</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>TfidfTransformer()</pre></div> </div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;MultinomialNB<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.naive_bayes.MultinomialNB.html\">?<span>Documentation for MultinomialNB</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>MultinomialNB()</pre></div> </div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print('Proportion of negative reviews: ', weightloss_data.sentiment.mean())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X1adnW9rR8jY",
        "outputId": "fdf1b478-9cdc-4c8c-cc7f-454f8468491a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Proportion of negative reviews:  0.278621255642183\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "This indicates some level of class imbalance, as the minority class (negative reviews) is significantly smaller than the majority class (positive reviews). However, it’s not so extreme (e.g., 90%-10%) that it becomes a critical concern."
      ],
      "metadata": {
        "id": "xjwwzSfGSEAe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#initilizaing Multinomial Naive Bayes classification model.\n",
        "\n",
        "from sklearn.metrics import classification_report, recall_score, precision_score, f1_score, roc_curve, auc, precision_recall_curve\n",
        "\n",
        "pred = nb_sent.predict(X_test)\n",
        "pred_prob = nb_sent.predict_proba(X_test)[:, 1]\n",
        "\n",
        "print(classification_report(y_test, pred))\n",
        "\n",
        "fpr, tpr, thresholds = roc_curve(y_test, pred_prob)\n",
        "precision, recall, thresholds_pr = precision_recall_curve(y_test, pred)\n",
        "\n",
        "print('ROC AUC: ', auc(fpr, tpr))\n",
        "print('Precision/Recall AUC: ', auc(precision, recall))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pQLonsTDSFRP",
        "outputId": "752ba81b-ea38-47a6-d1a5-4f848fd536e7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.73      1.00      0.84       353\n",
            "           1       1.00      0.01      0.03       135\n",
            "\n",
            "    accuracy                           0.73       488\n",
            "   macro avg       0.86      0.51      0.44       488\n",
            "weighted avg       0.80      0.73      0.62       488\n",
            "\n",
            "ROC AUC:  0.8113524289161683\n",
            "Precision/Recall AUC:  0.367038554948391\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.metrics import roc_curve, auc, precision_recall_curve, classification_report\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.pipeline import Pipeline\n",
        "\n",
        "# applying logistic regression model\n",
        "name = \"Logistic Regression\"\n",
        "classifier = LogisticRegression()\n",
        "\n",
        "# Pipeline for Logistic Regression\n",
        "clf_pipe = Pipeline([\n",
        "    ('tfidf', TfidfVectorizer()),  # TFIDF Vectorizer\n",
        "    (name, classifier),            # Logistic Regression Classifier\n",
        "])\n",
        "\n",
        "# Train and evaluate the model\n",
        "clf_pipe.fit(X_train, y_train)\n",
        "\n",
        "# Predictions\n",
        "pred = clf_pipe.predict(X_test)\n",
        "pred_prob = clf_pipe.predict_proba(X_test)[:, 1]\n",
        "\n",
        "# ROC and Precision-Recall Curves\n",
        "fpr, tpr, thresholds = roc_curve(y_test, pred_prob)\n",
        "precision, recall, thresholds_pr = precision_recall_curve(y_test, pred)\n",
        "\n",
        "# Print Metrics\n",
        "print('\\n\\n', name, '\\n\\n')\n",
        "print(classification_report(y_test, pred))\n",
        "print('ROC AUC: ', auc(fpr, tpr))\n",
        "print('Precision/Recall AUC: ', auc(precision, recall))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "k_R3IXdTSGh5",
        "outputId": "45ac241f-78cf-48cc-ca17-5730be649396"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "\n",
            " Logistic Regression \n",
            "\n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.81      0.97      0.88       353\n",
            "           1       0.84      0.39      0.54       135\n",
            "\n",
            "    accuracy                           0.81       488\n",
            "   macro avg       0.82      0.68      0.71       488\n",
            "weighted avg       0.82      0.81      0.79       488\n",
            "\n",
            "ROC AUC:  0.8680726051830867\n",
            "Precision/Recall AUC:  0.4243082661115448\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Applying Deep Learning Model\n",
        "tokenizer = Tokenizer(num_words=5000)\n",
        "tokenizer.fit_on_texts(X_train)\n",
        "X_train_seq = pad_sequences(tokenizer.texts_to_sequences(X_train), maxlen=200)\n",
        "X_test_seq = pad_sequences(tokenizer.texts_to_sequences(X_test), maxlen=200)"
      ],
      "metadata": {
        "id": "gMOrlqIzSGZo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Building Sequential Model\n",
        "deep_model = Sequential([\n",
        "    Embedding(input_dim=5000, output_dim=64, input_length=200),\n",
        "    LSTM(64, return_sequences=True),\n",
        "    Dropout(0.5),\n",
        "    LSTM(32),\n",
        "    Dense(1, activation='sigmoid')\n",
        "])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SjI54M9cSGR_",
        "outputId": "fd091150-b95e-41e0-c494-621f7fae4d5f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/core/embedding.py:90: UserWarning: Argument `input_length` is deprecated. Just remove it.\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Compiling and training the model\n",
        "deep_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n",
        "deep_model.fit(X_train_seq, y_train, epochs=3, batch_size=64, validation_data=(X_test_seq, y_test))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "unpvB2YDSGJb",
        "outputId": "704e3c17-762a-489f-bb84-8362654fdfa0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/3\n",
            "\u001b[1m31/31\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m15s\u001b[0m 297ms/step - accuracy: 0.6796 - loss: 0.6421 - val_accuracy: 0.7234 - val_loss: 0.5823\n",
            "Epoch 2/3\n",
            "\u001b[1m31/31\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m14s\u001b[0m 452ms/step - accuracy: 0.7274 - loss: 0.5562 - val_accuracy: 0.7520 - val_loss: 0.5020\n",
            "Epoch 3/3\n",
            "\u001b[1m31/31\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m17s\u001b[0m 321ms/step - accuracy: 0.8408 - loss: 0.3878 - val_accuracy: 0.7910 - val_loss: 0.4791\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.src.callbacks.history.History at 0x7d604b70c820>"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Prediction with deep learning model\n",
        "deep_train_pred = (deep_model.predict(X_train_seq) > 0.5).astype(int).flatten()\n",
        "print(\"Deep Learning Metrics:\")\n",
        "print(classification_report(y_train, deep_train_pred))\n",
        "print(\"ROC AUC:\", roc_auc_score(y_train, deep_train_pred))\n",
        "deep_test_pred = (deep_model.predict(X_test_seq) > 0.5).astype(int).flatten()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZwPEhPSHSGAF",
        "outputId": "642db54d-41fd-40d7-8bf5-5de313646648"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 78ms/step\n",
            "Deep Learning Metrics:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.90      0.96      0.93      1405\n",
            "           1       0.86      0.74      0.80       544\n",
            "\n",
            "    accuracy                           0.89      1949\n",
            "   macro avg       0.88      0.85      0.86      1949\n",
            "weighted avg       0.89      0.89      0.89      1949\n",
            "\n",
            "ROC AUC: 0.8470653652920244\n",
            "\u001b[1m16/16\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 83ms/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 2.2 Model Evaluation (15)"
      ],
      "metadata": {
        "id": "w5p-soEqhZ4V"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**2.2 A (8) Evaluate the models on both the training and testing sets to obtain both performance and goodness of fit.**"
      ],
      "metadata": {
        "id": "QmM9clTUwkEm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.metrics import confusion_matrix"
      ],
      "metadata": {
        "id": "s_SU1ZgqhdIE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Evaluation Function\n",
        "def evaluate_model(y_true, y_pred, y_scores, model_name):\n",
        "    print(f\"Metrics for {model_name}:\\n\")\n",
        "    print(classification_report(y_true, y_pred))\n",
        "    print(\"Accuracy:\", accuracy_score(y_true, y_pred))\n",
        "    print(\"ROC AUC:\", roc_auc_score(y_true, y_scores))\n",
        "\n",
        "    # Confusion Matrix\n",
        "    cm = confusion_matrix(y_true, y_pred)\n",
        "    sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\")\n",
        "    plt.title(f\"{model_name} Confusion Matrix\")\n",
        "    plt.xlabel(\"Predicted\")\n",
        "    plt.ylabel(\"True\")\n",
        "    plt.show()"
      ],
      "metadata": {
        "id": "qi48tDmBSqr_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Train and Test Predictions for Logistic Regression\n",
        "logistic_train_pred = clf_pipe.predict(X_train)  # Predicted labels for training set\n",
        "logistic_test_pred = clf_pipe.predict(X_test)   # Predicted labels for test set\n",
        "\n",
        "logistic_train_prob = clf_pipe.predict_proba(X_train)[:, 1]  # Probabilities for training set\n",
        "logistic_test_prob = clf_pipe.predict_proba(X_test)[:, 1]    # Probabilities for test set"
      ],
      "metadata": {
        "id": "tFo4aEnqSqlM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.metrics import confusion_matrix\n",
        "\n",
        "# Logistic Regression Evaluation\n",
        "def evaluate_model(y_true, y_pred, y_scores, model_name):\n",
        "    print(f\"Metrics for {model_name}:\\n\")\n",
        "    print(classification_report(y_true, y_pred))\n",
        "    print(f\"Accuracy: {accuracy_score(y_true, y_pred)}\")\n",
        "    print(f\"ROC AUC: {roc_auc_score(y_true, y_scores)}\")\n",
        "    print(\"-\" * 75)\n",
        "\n",
        "    # Confusion Matrix\n",
        "    cm = confusion_matrix(y_true, y_pred)\n",
        "    sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\")\n",
        "    plt.title(f\"{model_name} Confusion Matrix\")\n",
        "    plt.xlabel(\"Predicted\")\n",
        "    plt.ylabel(\"Actual\")\n",
        "    plt.show()\n",
        "\n",
        "# Example usage:\n",
        "evaluate_model(\n",
        "    y_train, logistic_train_pred, logistic_train_prob,\n",
        "    \"Logistic Regression with Training Data\"\n",
        ")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 715
        },
        "id": "PJv67aLdSqeu",
        "outputId": "a682e45b-a297-4fce-8ad6-f5b07e485390"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Metrics for Logistic Regression with Training Data:\n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.85      1.00      0.92      1405\n",
            "           1       0.99      0.55      0.70       544\n",
            "\n",
            "    accuracy                           0.87      1949\n",
            "   macro avg       0.92      0.77      0.81      1949\n",
            "weighted avg       0.89      0.87      0.86      1949\n",
            "\n",
            "Accuracy: 0.8717290918419702\n",
            "ROC AUC: 0.9648681180657317\n",
            "---------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "nb_train_pred = nb_sent.predict(X_train)\n",
        "nb_test_pred = nb_sent.predict(X_test)\n",
        "\n",
        "nb_train_prob = nb_sent.predict_proba(X_train)[:, 1]\n",
        "nb_test_prob = nb_sent.predict_proba(X_test)[:, 1]\n",
        "\n",
        "# Evaluate Naive Bayes\n",
        "evaluate_model(\n",
        "    y_train, nb_train_pred, nb_train_prob,\n",
        "    \"Naive Bayes with Training Data\"\n",
        ")\n",
        "evaluate_model(\n",
        "    y_test, nb_test_pred, nb_test_prob,\n",
        "    \"Naive Bayes with Test Data\"\n",
        ")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "agM86bHoSqWJ",
        "outputId": "a184130f-d327-4851-df03-9b7d0922f3ca"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Metrics for Naive Bayes with Training Data:\n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.75      1.00      0.86      1405\n",
            "           1       1.00      0.14      0.24       544\n",
            "\n",
            "    accuracy                           0.76      1949\n",
            "   macro avg       0.87      0.57      0.55      1949\n",
            "weighted avg       0.82      0.76      0.69      1949\n",
            "\n",
            "Accuracy: 0.7593637762955362\n",
            "ROC AUC: 0.9431599330123508\n",
            "---------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Metrics for Naive Bayes with Test Data:\n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.73      1.00      0.84       353\n",
            "           1       1.00      0.01      0.03       135\n",
            "\n",
            "    accuracy                           0.73       488\n",
            "   macro avg       0.86      0.51      0.44       488\n",
            "weighted avg       0.80      0.73      0.62       488\n",
            "\n",
            "Accuracy: 0.7274590163934426\n",
            "ROC AUC: 0.8113524289161683\n",
            "---------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "deep_train_prob = deep_model.predict(X_train_seq).flatten()\n",
        "deep_test_prob = deep_model.predict(X_test_seq).flatten()\n",
        "\n",
        "# Evaluate Deep Learning\n",
        "evaluate_model(\n",
        "    y_train, deep_train_pred, deep_train_prob,\n",
        "    \"Deep Learning with Training Data\"\n",
        ")\n",
        "evaluate_model(\n",
        "    y_test, deep_test_pred, deep_test_prob,\n",
        "    \"Deep Learning with Test Data\"\n",
        ")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "6U-7Pu0iSqM-",
        "outputId": "5b514e54-9a6f-4999-ec80-77ecdb90fe4d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 144ms/step\n",
            "\u001b[1m16/16\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 127ms/step\n",
            "Metrics for Deep Learning with Training Data:\n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.90      0.96      0.93      1405\n",
            "           1       0.86      0.74      0.80       544\n",
            "\n",
            "    accuracy                           0.89      1949\n",
            "   macro avg       0.88      0.85      0.86      1949\n",
            "weighted avg       0.89      0.89      0.89      1949\n",
            "\n",
            "Accuracy: 0.8948178553104156\n",
            "ROC AUC: 0.9510532237806155\n",
            "---------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Metrics for Deep Learning with Test Data:\n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.83      0.89      0.86       353\n",
            "           1       0.65      0.53      0.58       135\n",
            "\n",
            "    accuracy                           0.79       488\n",
            "   macro avg       0.74      0.71      0.72       488\n",
            "weighted avg       0.78      0.79      0.78       488\n",
            "\n",
            "Accuracy: 0.7909836065573771\n",
            "ROC AUC: 0.7896128423040604\n",
            "---------------------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "iSavI-ceSp-o"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**2.2 B (7) Based on your output in 2.2A, discuss and compare the goodness of fit and performance for each of the classification models. Which model is preferred? Why? Explain.**"
      ],
      "metadata": {
        "id": "QfIpYUd0wvup"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Preferred Model: Logistic Regression\n",
        "\n",
        "Logistic Regression achieves the best trade-off between accuracy, ROC AUC, and balanced class performance.\n",
        "\n",
        "It generalizes well to unseen data, avoiding overfitting issues observed in the Deep Learning model.\n",
        "\n",
        "Unlike Naive Bayes, it maintains acceptable recall for class 1, ensuring that positive sentiment reviews are not overlooked."
      ],
      "metadata": {
        "id": "VVWx2jq0xJQN"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 2.3 Discussion & Conclusion (10)"
      ],
      "metadata": {
        "id": "eDFkZOgBhdmw"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**2.3 (10) Briefly summarize the problem statement and data. Then, discuss your analysis and findings. Within the context of the business problem and your analysis results, provide business recommendations. Be sure to discuss any limitations, constraints, or ethical concerns that could impact the implementation of the recommended solution.**"
      ],
      "metadata": {
        "id": "Ew5MNF9oh4XC"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Problem Statement and Data**\n",
        "\n",
        "The problem involves using sentiment analysis on customer reviews to identify key factors influencing positive and negative sentiments. The dataset contains labeled text reviews, categorized into positive and negative sentiments, which serves as the basis for building classification models. The goal is to enable the business to understand customer feedback better and use this insight to improve product offerings and customer experience.\n",
        "\n",
        "**Findings**\n",
        "\n",
        "Several classification models were implemented and evaluated, including Logistic Regression, Naive Bayes, and Deep Learning models.Logistic Regression achieved the best balance in accuracy, ROC AUC, and recall for identifying positive sentiments.\n",
        "Naive Bayes had limitations in maintaining recall for certain classes, leading to potential underperformance in identifying positive reviews. The Deep Learning model tended to overfit, performing well on training data but not generalizing effectively to unseen data.Logistic Regression emerged as the preferred model due to its robustness, simplicity, and ability to generalize well to unseen data, avoiding overfitting while maintaining high performance.\n",
        "\n",
        "**Business Recommendations**\n",
        "\n",
        "*Enhance Product and Service Quality:*\n",
        "\n",
        "Use sentiment analysis to identify recurring themes in negative reviews, focusing on areas for improvement. Highlight and promote aspects associated with positive sentiments to strengthen customer satisfaction and loyalty.\n",
        "\n",
        "*Customer Support Optimization:*\n",
        "\n",
        "Monitor negative sentiment trends to proactively address issues, potentially reducing churn.\n",
        "Implement automated response systems (e.g., chatbots) using insights from the model to streamline customer support.\n",
        "\n",
        "*Marketing Insights:*\n",
        "\n",
        "Use positive sentiment predictors to tailor marketing messages, emphasizing features that resonate with customers.\n",
        "\n",
        "*Data-Driven Decision-Making:*\n",
        "\n",
        "Integrate sentiment analysis into periodic performance reviews, enabling continuous feedback loops to improve offerings.\n",
        "\n",
        "**Limitations and Constraints**\n",
        "\n",
        "*   Data Imbalance: If the dataset is imbalanced, it could skew model performance and require techniques like resampling or weighted loss functions to mitigate.\n",
        "*Feature Limitation: The model only captures information present in the text data and may overlook other latent factors contributing to customer sentiment.\n",
        "*Ethical Concerns:Customers should be informed about how their feedback is analyzed and used. Care must be taken to avoid reinforcing biases present in the training data, which could lead to unfair treatment of certain customer groups.\n",
        "\n",
        "By addressing these limitations and implementing the recommended strategies, the business can leverage sentiment analysis to improve customer experience and align offerings with customer expectations effectively."
      ],
      "metadata": {
        "id": "-el8sR1-ykyo"
      }
    }
  ]
}